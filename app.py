from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton,  InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import asyncio
from config import BOT_TOKEN
from keyboard import inlinekeyboard, Rasschet_Keyboard
from states import Start
from checker import checker

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
loop = asyncio.get_event_loop()


curs = 12.9
nacenka = 1000
dostavka = 1300


@dp.message_handler(commands=["start"], state="*")
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    global user_id
    user_id = message.from_user.id
    firstname = message.from_user.first_name
    await message.answer_photo(open('src/img/Shapka.jpg', "rb"),
                               f"""
ü§† –ù–∏—Ö–∞–æ, {firstname}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É GET POIZON

–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è?"
                               """, reply_markup=inlinekeyboard.inline_start, parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", state="*")
async def rasshet_itog(message: types.Message):
    await message.answer(f"""
<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b>                        

–ù–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @Getpoizon_manager
 
""", parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å", state="*")
async def rasshet_itog(message: types.Message):
    await message.answer(f"""
<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b>                        

–ù–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @Getpoizon_manager
 
""", parse_mode=types.ParseMode.HTML)


@dp.message_handler(lambda message: message.text == "–ü–æ—á–µ–º—É –Ω–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å?", state="*")
async def rasshet_itog(message: types.Message):
    await message.answer(f"""
<b>–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b>                        

–ù–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @Getpoizon_manager
 
""", parse_mode=types.ParseMode.HTML)

# @dp.message_handler(lambda message: message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", state="*")
# async def rasshet_itog(message: types.Message):
#     await message.answer("–û–∫")


@dp.callback_query_handler(text="calculate", state="*")
async def rasshet(callback: types.CallbackQuery, state=FSMContext):

    await bot.send_photo(user_id, open('src/img/Shapka.jpg', "rb"),
                         caption=(
        ''' 
–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ <b>–Æ–ê–ù–Ø–•</b>üá®üá≥
–∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è <b>–ó–ê–ß–ï–†–ö–ù–£–¢–ê</b> –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>–°–õ–ï–í–ê</b>.
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. 

<b>–£ –Ω–∞—Å –Ω–µ—Ç —ç—Ç–∏—Ö —Å–∫–∏–¥–æ–∫!</b> 

                               '''), parse_mode=types.ParseMode.HTML)
    await Start.schet.set()


@dp.callback_query_handler(text="btn1", state="*")
async def rasshet(callback: types.CallbackQuery, state=FSMContext):

    await bot.send_photo(user_id, open('src/img/Shapka.jpg', "rb"),
                         caption=(
        ''' 
–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ <b>–Æ–ê–ù–Ø–•</b>üá®üá≥
–∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±–∏—Ä–∞–π—Ç–µ —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è <b>–ó–ê–ß–ï–†–ö–ù–£–¢–ê</b> –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>–°–õ–ï–í–ê</b>.
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. 

<b>–£ –Ω–∞—Å –Ω–µ—Ç —ç—Ç–∏—Ö —Å–∫–∏–¥–æ–∫!</b> 

                               '''), parse_mode=types.ParseMode.HTML)
    await Start.schet.set()


@dp.message_handler(state=Start.schet)
async def rasshet_itog(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['stoim'] = message.text
        stoim = data['stoim']
        s = ''
        stoim_cny, s = await checker(stoim, s)
        if stoim_cny == -1:
            await bot.send_message(message.from_user.id,
                                   text=(s))
            await Start.schet.set()
        else:
            itog = stoim_cny * curs + nacenka + dostavka
            await bot.send_message(message.from_user.id,
                                   text=(
                                       f"""
                                       –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {str(round(itog))}‚ÇΩ\n
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç: 
–ö—É—Ä—Å ¬• - {str(curs)}‚ÇΩ
–î–æ—Å—Ç–∞–≤–∫–∞  {str(dostavka)}‚ÇΩ
–ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ - {str(nacenka)}‚ÇΩ"""), reply_markup=Rasschet_Keyboard.inline_rasschet)
            await state.finish()


@dp.message_handler(content_types=['text'])
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("–û–∫")

if __name__ == "__main__":
    executor.start_polling(
        dispatcher=dp, skip_updates=True)
